Index: AWSCodeOSS/build/private/code-editor-src/src/vs/platform/sign/browser/signService.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/platform/sign/browser/signService.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/platform/sign/browser/signService.ts
@@ -58,40 +58,12 @@ export class SignService extends Abstrac
 
 	@memoize
 	private async vsda(): Promise<typeof vsda_web> {
-		const checkInterval = new WindowIntervalTimer();
-		let [wasm] = await Promise.all([
-			this.getWasmBytes(),
-			new Promise<void>((resolve, reject) => {
-				importAMDNodeModule('vsda', 'rust/web/vsda.js').then(() => resolve(), reject);
-
-				// todo@connor4312: there seems to be a bug(?) in vscode-loader with
-				// require() not resolving in web once the script loads, so check manually
-				checkInterval.cancelAndSet(() => {
-					if (typeof vsda_web !== 'undefined') {
-						resolve();
-					}
-				}, 50, mainWindow);
-			}).finally(() => checkInterval.dispose()),
-		]);
-
-		const keyBytes = new TextEncoder().encode(this.productService.serverLicense?.join('\n') || '');
-		for (let i = 0; i + STEP_SIZE < keyBytes.length; i += STEP_SIZE) {
-			const key = await crypto.subtle.importKey('raw', keyBytes.slice(i + IV_SIZE, i + IV_SIZE + KEY_SIZE), { name: 'AES-CBC' }, false, ['decrypt']);
-			wasm = await crypto.subtle.decrypt({ name: 'AES-CBC', iv: keyBytes.slice(i, i + IV_SIZE) }, key, wasm);
-		}
-
-		await vsda_web.default(wasm);
-
-		return vsda_web;
+		//@ts-ignore
+		throw new Error("not supported");
 	}
 
 	private async getWasmBytes(): Promise<ArrayBuffer> {
-		const url = resolveAmdNodeModulePath('vsda', 'rust/web/vsda_bg.wasm');
-		const response = await fetch(url);
-		if (!response.ok) {
-			throw new Error('error loading vsda');
-		}
-
-		return response.arrayBuffer();
+		//@ts-ignore
+		throw new Error("not supported");
 	}
 }
