Override report issues with open webapp feedback command

---
 .../contrib/issue/common/issue.contribution.ts        | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

Index: third-party-src/src/vs/workbench/contrib/issue/common/issue.contribution.ts
===================================================================
--- third-party-src.orig/src/vs/workbench/contrib/issue/common/issue.contribution.ts
+++ third-party-src/src/vs/workbench/contrib/issue/common/issue.contribution.ts
@@ -8,7 +8,7 @@ import { localize, localize2 } from '../
 import { ICommandAction } from '../../../../platform/action/common/action.js';
 import { Categories } from '../../../../platform/action/common/actionCommonCategories.js';
 import { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';
-import { CommandsRegistry, ICommandMetadata } from '../../../../platform/commands/common/commands.js';
+import { CommandsRegistry, ICommandMetadata, ICommandService } from '../../../../platform/commands/common/commands.js';
 import { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';
 import { INotificationService } from '../../../../platform/notification/common/notification.js';
 import { IProductService } from '../../../../platform/product/common/productService.js';
@@ -85,14 +85,7 @@ export class BaseIssueContribution exten
 		this._register(CommandsRegistry.registerCommand({
 			id: OpenIssueReporterActionId,
 			handler: function (accessor, args?: string | [string] | OpenIssueReporterArgs) {
-				const data: Partial<IssueReporterData> =
-					typeof args === 'string'
-						? { extensionId: args }
-						: Array.isArray(args)
-							? { extensionId: args[0] }
-							: args ?? {};
-
-				return accessor.get(IWorkbenchIssueService).openReporter(data);
+				return accessor.get(ICommandService).executeCommand('lambda-console.reportIssue');
 			},
 			metadata: OpenIssueReporterCommandMetadata
 		}));
