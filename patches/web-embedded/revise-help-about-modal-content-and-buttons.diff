Revise Help->About Modal content and buttons

---
 .../parts/dialogs/dialog.web.contribution.ts  |  2 +-
 .../browser/parts/dialogs/dialogHandler.ts    | 26 +++++--------------
 .../parts/dialogs/dialog.contribution.ts      |  2 +-
 3 files changed, 8 insertions(+), 22 deletions(-)

Index: third-party-src/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
===================================================================
--- third-party-src.orig/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
+++ third-party-src/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
@@ -34,12 +34,11 @@ export class DialogHandlerContribution e
 		@IKeybindingService keybindingService: IKeybindingService,
 		@IInstantiationService instantiationService: IInstantiationService,
 		@IProductService productService: IProductService,
-		@IClipboardService clipboardService: IClipboardService,
 		@IOpenerService openerService: IOpenerService
 	) {
 		super();
 
-		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService, openerService));
+		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, openerService));
 
 		this.model = (this.dialogService as DialogService).model;
 
Index: third-party-src/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
===================================================================
--- third-party-src.orig/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
+++ third-party-src/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
@@ -12,8 +12,6 @@ import { Dialog, IDialogResult } from '.
 import { DisposableStore } from '../../../../base/common/lifecycle.js';
 import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';
 import { IProductService } from '../../../../platform/product/common/productService.js';
-import { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';
-import { fromNow } from '../../../../base/common/date.js';
 import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
 import { MarkdownRenderer, openLinkFromMarkdown } from '../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';
 import { IOpenerService } from '../../../../platform/opener/common/opener.js';
@@ -38,7 +36,6 @@ export class BrowserDialogHandler extend
 		@IKeybindingService private readonly keybindingService: IKeybindingService,
 		@IInstantiationService instantiationService: IInstantiationService,
 		@IProductService private readonly productService: IProductService,
-		@IClipboardService private readonly clipboardService: IClipboardService,
 		@IOpenerService private readonly openerService: IOpenerService
 	) {
 		super();
@@ -77,33 +74,23 @@ export class BrowserDialogHandler extend
 	}
 
 	async about(): Promise<void> {
-		const detailString = (useAgo: boolean): string => {
+		const detailString = (): string => {
 			return localize('aboutDetail',
-				"Version: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
-				this.productService.version || 'Unknown',
-				this.productService.commit || 'Unknown',
-				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
-				navigator.userAgent
+				"Note: The Lambda Code Editor doesn't include all of the features available in the desktop application. To use features like the terminal and debugger, download your code and use the desktop version.",
 			);
 		};
 
-		const detail = detailString(true);
-		const detailToCopy = detailString(false);
+		const detail = detailString();
 
-		const { button } = await this.doShow(
+		await this.doShow(
 			Severity.Info,
 			this.productService.nameLong,
 			[
-				localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, "&&Copy"),
 				localize('ok', "OK")
 			],
 			detail,
-			1
+			0
 		);
-
-		if (button === 0) {
-			this.clipboardService.writeText(detailToCopy);
-		}
 	}
 
 	private async doShow(type: Severity | DialogType | undefined, message: string, buttons?: string[], detail?: string, cancelId?: number, checkbox?: ICheckbox, inputs?: IInputElement[], customOptions?: ICustomDialogOptions): Promise<IDialogResult> {
Index: third-party-src/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
===================================================================
--- third-party-src.orig/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
+++ third-party-src/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
@@ -45,7 +45,7 @@ export class DialogHandlerContribution e
 	) {
 		super();
 
-		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService, openerService));
+		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, openerService));
 		this.nativeImpl = new Lazy(() => new NativeDialogHandler(logService, nativeHostService, productService, clipboardService));
 
 		this.model = (this.dialogService as DialogService).model;
