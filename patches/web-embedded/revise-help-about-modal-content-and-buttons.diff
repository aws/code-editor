Revise Help->About Modal content and buttons

---
 .../parts/dialogs/dialog.web.contribution.ts  |  2 +-
 .../browser/parts/dialogs/dialogHandler.ts    | 26 +++++--------------
 .../parts/dialogs/dialog.contribution.ts      |  2 +-
 3 files changed, 8 insertions(+), 22 deletions(-)

Index: AWSCodeOSS/build/private/code-editor-src/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
@@ -37,7 +37,7 @@ export class DialogHandlerContribution e
 	) {
 		super();
 
-		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService));
+		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService));
 
 		this.model = (this.dialogService as DialogService).model;
 
Index: AWSCodeOSS/build/private/code-editor-src/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
@@ -14,8 +14,6 @@ import { StandardKeyboardEvent } from '.
 import { EventHelper } from '../../../../base/browser/dom.js';
 import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';
 import { IProductService } from '../../../../platform/product/common/productService.js';
-import { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';
-import { fromNow } from '../../../../base/common/date.js';
 import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
 import { MarkdownRenderer } from '../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';
 import { defaultButtonStyles, defaultCheckboxStyles, defaultDialogStyles, defaultInputBoxStyles } from '../../../../platform/theme/browser/defaultStyles.js';
@@ -39,9 +37,7 @@ export class BrowserDialogHandler extend
 		@ILayoutService private readonly layoutService: ILayoutService,
 		@IKeybindingService private readonly keybindingService: IKeybindingService,
 		@IInstantiationService private readonly instantiationService: IInstantiationService,
-		@IProductService private readonly productService: IProductService,
-		@IClipboardService private readonly clipboardService: IClipboardService
-	) {
+		@IProductService private readonly productService: IProductService	) {
 		super();
 	}
 
@@ -76,33 +72,23 @@ export class BrowserDialogHandler extend
 	}
 
 	async about(): Promise<void> {
-		const detailString = (useAgo: boolean): string => {
+		const detailString = (): string => {
 			return localize('aboutDetail',
-				"Version: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
-				this.productService.version || 'Unknown',
-				this.productService.commit || 'Unknown',
-				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
-				navigator.userAgent
+				"Note: The Lambda Code Editor doesn't include all of the features available in the desktop application. To use features like the terminal and debugger, download your code and use the desktop version.",
 			);
 		};
 
-		const detail = detailString(true);
-		const detailToCopy = detailString(false);
+		const detail = detailString();
 
-		const { button } = await this.doShow(
+		await this.doShow(
 			Severity.Info,
 			this.productService.nameLong,
 			[
-				localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, "&&Copy"),
 				localize('ok', "OK")
 			],
 			detail,
-			1
+			0
 		);
-
-		if (button === 0) {
-			this.clipboardService.writeText(detailToCopy);
-		}
 	}
 
 	private async doShow(type: Severity | DialogType | undefined, message: string, buttons?: string[], detail?: string, cancelId?: number, checkbox?: ICheckbox, inputs?: IInputElement[], customOptions?: ICustomDialogOptions): Promise<IDialogResult> {
Index: AWSCodeOSS/build/private/code-editor-src/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
@@ -43,7 +43,7 @@ export class DialogHandlerContribution e
 	) {
 		super();
 
-		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService));
+		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService));
 		this.nativeImpl = new Lazy(() => new NativeDialogHandler(logService, nativeHostService, productService, clipboardService));
 
 		this.model = (this.dialogService as DialogService).model;
