Adjusted from (MIT licensed) original source:
- https://github.com/coder/code-server/blob/6d9530aa6b84514b8b54700d88cbcc66c70b789f/patches/marketplace.diff

Add Open VSX as default marketplace. If environment variable EXTENSIONS_GALLERY is set,
parse it as JSON and use as the custom extensions gallery configuration.

Adjusted ExtensionLatestVersionUri endpoint to be compatible with OpenVSX API
(see: https://open-vsx.org/swagger-ui/index.html?urls.primaryName=VSCode%20Adapter)

Index: third-party-src/src/vs/server/node/webClientServer.ts
===================================================================
--- third-party-src.orig/src/vs/server/node/webClientServer.ts
+++ third-party-src/src/vs/server/node/webClientServer.ts
@@ -338,14 +338,7 @@ export class WebClientServer {
 		const productConfiguration: Partial<Mutable<IProductConfiguration>> = {
 			rootEndpoint: base,
 			embedderIdentifier: 'server-distro',
-			extensionsGallery: this._webExtensionResourceUrlTemplate && this._productService.extensionsGallery ? {
-				...this._productService.extensionsGallery,
-				resourceUrlTemplate: this._webExtensionResourceUrlTemplate.with({
-					scheme: 'http',
-					authority: remoteAuthority,
-					path: `${webExtensionRoute}/${this._webExtensionResourceUrlTemplate.authority}${this._webExtensionResourceUrlTemplate.path}`
-				}).toString(true)
-			} : undefined
+			extensionsGallery: this._productService.extensionsGallery,
 		};
 
 		const proposedApi = this._environmentService.args['enable-proposed-api'];
Index: third-party-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
===================================================================
--- third-party-src.orig/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
+++ third-party-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
@@ -163,9 +163,9 @@ export abstract class AbstractExtensionR
 	}
 
 	protected _isWebExtensionResourceEndPoint(uri: URI): boolean {
-		const uriPath = uri.path, serverRootPath = RemoteAuthorities.getServerRootPath();
-		// test if the path starts with the server root path followed by the web extension resource end point segment
-		return uriPath.startsWith(serverRootPath) && uriPath.startsWith(WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT, serverRootPath.length);
+		const uriPath = uri.path;
+		// test if the path starts with the web extension resource end point segment
+		return uriPath.startsWith(WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT);
 	}
 
 }
Index: third-party-src/src/vs/platform/extensionManagement/common/extensionGalleryManifestService.ts
===================================================================
--- third-party-src.orig/src/vs/platform/extensionManagement/common/extensionGalleryManifestService.ts
+++ third-party-src/src/vs/platform/extensionManagement/common/extensionGalleryManifestService.ts
@@ -46,7 +46,7 @@ export class ExtensionGalleryManifestSer
 				type: ExtensionGalleryResourceType.ExtensionQueryService
 			},
 			{
-				id: `${extensionsGallery.serviceUrl}/vscode/{publisher}/{name}/latest`,
+				id: `${extensionsGallery.serviceUrl}/{publisher}/{name}/latest`,
 				type: ExtensionGalleryResourceType.ExtensionLatestVersionUri
 			},
 			{
Index: sagemaker-code-editor/vscode/src/vs/platform/product/common/product.ts
===================================================================
--- third-party-src.orig/src/vs/platform/product/common/product.ts
+++ third-party-src/src/vs/platform/product/common/product.ts
@@ -49,6 +49,14 @@ else if (globalThis._VSCODE_PRODUCT_JSON
 			version: pkg.version
 		});
 	}
+
+	if (env['EXTENSIONS_GALLERY']) {
+		console.log(`Custom extensions gallery detected. Parsing...`);
+		Object.assign(product, {
+			extensionsGallery: JSON.parse(env['EXTENSIONS_GALLERY'])
+		});
+	}
+	console.log(JSON.stringify(product.extensionsGallery, null, 2));
 }
 
 // Web environment or unknown
Index: third-party-src/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
===================================================================
--- third-party-src.orig/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
+++ third-party-src/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
@@ -70,6 +70,8 @@ import { ILocalizedString } from '../../../../pla
 import { IExtensionGalleryManifest, IExtensionGalleryManifestService } from '../../../../platform/extensionManagement/common/extensionGalleryManifest.js';
 import { URI } from '../../../../base/common/uri.js';
 import { IMcpGalleryService } from '../../../../platform/mcp/common/mcpManagement.js';
+import { IProductService } from '../../../../platform/product/common/productService.js';
+import { memoize } from '../../../../base/common/decorators.js';
 
 export const ExtensionsSortByContext = new RawContextKey<string>('extensionsSortByValue', '');
 export const SearchMarketplaceExtensionsContext = new RawContextKey<boolean>('searchMarketplaceExtensions', false);
@@ -93,7 +93,6 @@ const SortByUpdateDateContext = new RawC
 const REMOTE_CATEGORY: ILocalizedString = localize2({ key: 'remote', comment: ['Remote as in remote machine'] }, "Remote");
 
 export class ExtensionsViewletViewsContribution extends Disposable implements IWorkbenchContribution {
-
 	private readonly container: ViewContainer;
 
 	constructor(
@@ -528,6 +528,7 @@ export class ExtensionsViewPaneContainer
 		@IExtensionService extensionService: IExtensionService,
 		@IViewDescriptorService viewDescriptorService: IViewDescriptorService,
 		@IPreferencesService private readonly preferencesService: IPreferencesService,
+		@IProductService private readonly productService: IProductService,
 		@ICommandService private readonly commandService: ICommandService,
 		@IMcpGalleryService private readonly mcpGalleryService: IMcpGalleryService,
 		@ILogService logService: ILogService,
@@ -569,6 +571,15 @@ export class ExtensionsViewPaneContainer
 			});
 	}
 
+	@memoize
+	get extensionsGalleryHostname(): string {
+		if (this.productService.extensionsGallery?.serviceUrl) {
+			return new URL(this.productService.extensionsGallery?.serviceUrl).hostname;
+		}
+
+		return 'Marketplace';
+	}
+
 	get searchValue(): string | undefined {
 		return this.searchBox?.getValue();
 	}
@@ -583,8 +594,7 @@ export class ExtensionsViewPaneContainer
		hide(overlay);

		this.header = append(this.root, $('.header'));
-		const placeholder = localize('searchExtensions', "Search Extensions in Marketplace");
-
+		const placeholder = localize('searchExtensions', 'Search extensions in {0}', this.extensionsGalleryHostname);
 		const searchValue = this.searchViewletState['query.value'] ? this.searchViewletState['query.value'] : '';
 
 		const searchContainer = append(this.header, $('.extensions-search-container'));