Adjusted from (MIT licensed) original source:
- https://github.com/coder/AWSCodeOSS/blob/6d9530aa6b84514b8b54700d88cbcc66c70b789f/patches/marketplace.diff

Add Open VSX as default marketplace

Index: AWSCodeOSS/build/private/code-editor-src/src/vs/server/node/webClientServer.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/server/node/webClientServer.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/server/node/webClientServer.ts
@@ -115,7 +115,7 @@ export class WebClientServer {
 
 		this._staticRoute = `${serverRootPath}/static`;
 		this._callbackRoute = `${serverRootPath}/callback`;
-		this._webExtensionRoute = `${serverRootPath}/web-extension-resource`;
+		this._webExtensionRoute = `/web-extension-resource`;
 	}
 
 	/**
@@ -314,14 +314,7 @@ export class WebClientServer {
 		const productConfiguration = {
 			rootEndpoint: base,
 			embedderIdentifier: 'server-distro',
-			extensionsGallery: this._webExtensionResourceUrlTemplate && this._productService.extensionsGallery ? {
-				...this._productService.extensionsGallery,
-				resourceUrlTemplate: this._webExtensionResourceUrlTemplate.with({
-					scheme: 'http',
-					authority: remoteAuthority,
-					path: `${this._webExtensionRoute}/${this._webExtensionResourceUrlTemplate.authority}${this._webExtensionResourceUrlTemplate.path}`
-				}).toString(true)
-			} : undefined
+			extensionsGallery: this._productService.extensionsGallery,
 		} satisfies Partial<IProductConfiguration>;
 
 		if (!this._environmentService.isBuilt) {
Index: AWSCodeOSS/build/private/code-editor-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
@@ -140,9 +140,9 @@ export abstract class AbstractExtensionR
 	}
 
 	protected _isWebExtensionResourceEndPoint(uri: URI): boolean {
-		const uriPath = uri.path, serverRootPath = RemoteAuthorities.getServerRootPath();
-		// test if the path starts with the server root path followed by the web extension resource end point segment
-		return uriPath.startsWith(serverRootPath) && uriPath.startsWith(WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT, serverRootPath.length);
+		const uriPath = uri.path;
+		// test if the path starts with the web extension resource end point segment
+		return uriPath.startsWith(WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT);
 	}
 
 }
