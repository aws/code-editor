Index: AWSCodeOSS/build/private/code-editor-src/src/vs/server/node/webClientServer.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/server/node/webClientServer.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/server/node/webClientServer.ts
@@ -379,6 +379,11 @@ export class WebClientServer {
 			values['WORKBENCH_BUILTIN_EXTENSIONS'] = asJSON(bundledExtensions);
 		}
 
+		if (parsedUrl.query.jsonConfig) {
+			res.writeHead(200, { 'Content-Type': 'application/json' });
+			return void res.end(JSON.stringify(workbenchWebConfiguration, null, 4));
+		}
+
 		let data;
 		try {
 			const workbenchTemplate = (await promises.readFile(filePath)).toString();
Index: AWSCodeOSS/build/private/code-editor-src/src/vs/amdX.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/amdX.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/amdX.ts
@@ -72,6 +72,10 @@ class AMDModuleImporter {
 		if (this._isRenderer) {
 			this._amdPolicy = (globalThis as any)._VSCODE_WEB_PACKAGE_TTP ?? window.trustedTypes?.createPolicy('amdLoader', {
 				createScriptURL(value) {
+					//@ts-ignore
+					if (value.startsWith(globalThis._VSCODE_FILE_ROOT.slice(0,-5))) {
+						return value;
+					}
 					if (value.startsWith(window.location.origin)) {
 						return value;
 					}
Index: AWSCodeOSS/build/private/code-editor-src/src/vs/code/browser/workbench/workbench.ts
===================================================================
--- AWSCodeOSS.orig/build/private/code-editor-src/src/vs/code/browser/workbench/workbench.ts
+++ AWSCodeOSS/build/private/code-editor-src/src/vs/code/browser/workbench/workbench.ts
@@ -594,15 +594,34 @@ function readCookie(name: string): strin
 	return undefined;
 }
 
-(function () {
-
-	// Find config by checking for DOM
-	const configElement = mainWindow.document.getElementById('vscode-workbench-web-configuration');
-	const configElementAttribute = configElement ? configElement.getAttribute('data-settings') : undefined;
-	if (!configElement || !configElementAttribute) {
-		throw new Error('Missing web configuration element');
+(function initialize(config?: IWorkbenchConstructionOptions & { folderUri?: UriComponents; workspaceUri?: UriComponents; callbackRoute: string }) {
+	if (!config) {
+		// Find config by checking for DOM
+		const configElement = mainWindow.document.getElementById('vscode-workbench-web-configuration');
+		const configElementAttribute = configElement ? configElement.getAttribute('data-settings') : undefined;
+		if (!configElement || !configElementAttribute || /^{{/.test(configElementAttribute)) {
+			window.addEventListener('message', function eventHandler(e) {
+				if (e.data?.source !== 'code-editor-wrapper') {
+					return;
+				}
+				if (e.data?.action === 'setConfig') {
+					if (e.data.config.remoteUrl) {
+						globalThis._VSCODE_REMOTE_URL = new URL(e.data.config.remoteUrl);
+					}
+					initialize(e.data.config);
+					window.removeEventListener('message', eventHandler);
+					return;
+				}
+			});
+			window.top?.postMessage({
+				source: 'code-editor',
+				action: "getConfig"
+			}, '*');
+			return;
+		}
+		config  = JSON.parse(configElementAttribute);
 	}
-	const config: IWorkbenchConstructionOptions & { folderUri?: UriComponents; workspaceUri?: UriComponents; callbackRoute: string } = JSON.parse(configElementAttribute);
+	if (!config) return;
 	const secretStorageKeyPath = readCookie('vscode-secret-key-path');
 	const secretStorageCrypto = secretStorageKeyPath && ServerKeyedAESCrypto.supported()
 		? new ServerKeyedAESCrypto(secretStorageKeyPath) : new TransparentCrypto();
