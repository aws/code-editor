Index: AWSCodeOSS/build-private/src/build/lib/mangle/index.ts
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/lib/mangle/index.ts
+++ AWSCodeOSS/build-private/src/build/lib/mangle/index.ts
@@ -5,6 +5,7 @@
 
 import * as v8 from 'node:v8';
 import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 import { argv } from 'process';
 import { Mapping, SourceMapGenerator } from 'source-map';
@@ -421,9 +422,15 @@ export class Mangler {
 		private readonly log: typeof console.log = () => { },
 		private readonly config: { readonly manglePrivateFields: boolean; readonly mangleExports: boolean },
 	) {
-
-		this.renameWorkerPool = workerpool.pool(path.join(__dirname, 'renameWorker.js'), {
-			maxWorkers: 1,
+		// The following patch is optional, it is an optimisation to speed up the build process
+		// This mangle/rename process is the most CPU-intensive of the compile-build target
+		// If there is enough memory and CPU resources are available, this task can be parallelised
+		// Limited max workers to 4 (encountered OOM with 5 workers no matter the amount of memory)
+		const memoryPerWorker = 10737418240; // 10GiB
+		const mainThreadReservedMemory = 2147483648; // 2GiB
+		const maxWorkers = Math.max(1, Math.min(4, os.availableParallelism() - 1, Math.floor((v8.getHeapStatistics().total_available_size - mainThreadReservedMemory) / memoryPerWorker)));
+		this.log(`Setting up rename worker pool with ${maxWorkers} workers`);		this.renameWorkerPool = workerpool.pool(path.join(__dirname, 'renameWorker.js'), {
+			maxWorkers: maxWorkers,
 			minWorkers: 'max'
 		});
 	}
Index: AWSCodeOSS/build-private/src/build/lib/mangle/index.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/lib/mangle/index.js
+++ AWSCodeOSS/build-private/src/build/lib/mangle/index.js
@@ -7,6 +7,7 @@ Object.defineProperty(exports, "__esModu
 exports.Mangler = void 0;
 const v8 = require("node:v8");
 const fs = require("fs");
+const os = require("os");
 const path = require("path");
 const process_1 = require("process");
 const source_map_1 = require("source-map");
@@ -366,8 +367,16 @@ class Mangler {
         this.projectPath = projectPath;
         this.log = log;
         this.config = config;
+        // The following patch is optional, it is an optimisation to speed up the build process
+        // This mangle/rename process is the most CPU-intensive of the compile-build target
+        // If there is enough memory and CPU resources are available, this task can be parallelised
+        // Limited max workers to 4 (encountered OOM with 5 workers no matter the amount of memory)
+        const memoryPerWorker = 10737418240; // 10GiB
+        const mainThreadReservedMemory = 2147483648; // 2GiB
+        const maxWorkers = Math.max(1, Math.min(4, os.availableParallelism() - 1, Math.floor((v8.getHeapStatistics().total_available_size - mainThreadReservedMemory) / memoryPerWorker)));
+        this.log(`Setting up rename worker pool with ${maxWorkers} workers`);
         this.renameWorkerPool = workerpool.pool(path.join(__dirname, 'renameWorker.js'), {
-            maxWorkers: 1,
+            maxWorkers: maxWorkers,
             minWorkers: 'max'
         });
     }
Index: AWSCodeOSS/build-private/src/build/gulpfile.reh.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/gulpfile.reh.js
+++ AWSCodeOSS/build-private/src/build/gulpfile.reh.js
@@ -33,6 +33,7 @@ const cp = require('child_process');
 const log = require('fancy-log');
 const { isAMD } = require('./lib/amd');
 const buildfile = require('./buildfile');
+const through = require("through2");
 
 const REPO_ROOT = path.dirname(__dirname);
 const commit = getVersion(REPO_ROOT);
@@ -227,6 +228,15 @@ function nodejs(platform, arch) {
 		arch = 'x64';
 	}
 
+	if (process.env['CUSTOM_NODE_PATH']) {
+		log(`Bundling custom Node from '${process.env['CUSTOM_NODE_PATH']}'...`);
+		return gulp.src(process.env['CUSTOM_NODE_PATH'])
+			.pipe(flatmap(stream => stream.pipe(gunzip()).pipe(untar())))
+			.pipe(filter('**/node'))
+			.pipe(util.setExecutableBit('**'))
+			.pipe(rename('node'));
+	}
+
 	log(`Downloading node.js ${nodeVersion} ${platform} ${arch} from ${product.nodejsRepository}...`);
 
 	const glibcPrefix = process.env['VSCODE_NODE_GLIBC'] ?? '';
@@ -281,7 +291,7 @@ function nodejs(platform, arch) {
 	}
 }
 
-function packageTask(type, platform, arch, sourceFolderName, destinationFolderName) {
+function packageTask(type, platform, arch, sourceFolderName, destinationFolderName, isSlim=false) {
 	const destination = path.join(BUILD_ROOT, destinationFolderName);
 
 	return () => {
@@ -359,6 +369,7 @@ function packageTask(type, platform, arc
 			}));
 
 		const license = gulp.src(['remote/LICENSE'], { base: 'remote', allowEmpty: true });
+		const thirdPartylicense = gulp.src(['LICENSE-THIRD-PARTY'], { base: '.', allowEmpty: true });
 
 		const jsFilter = util.filter(data => !data.isDirectory() && /\.js$/.test(data.path));
 
@@ -374,7 +385,10 @@ function packageTask(type, platform, arc
 			.pipe(jsFilter.restore);
 
 		const nodePath = `.build/node/v${nodeVersion}/${platform}-${arch}`;
-		const node = gulp.src(`${nodePath}/**`, { base: nodePath, dot: true });
+		// Do not include Node in slim package
+		const emptyTask = through.obj();
+		emptyTask.end();
+		const node = isSlim ? emptyTask : gulp.src(`${nodePath}/**`, { base: nodePath, dot: true });
 
 		let web = [];
 		if (type === 'reh-web') {
@@ -390,6 +404,7 @@ function packageTask(type, platform, arc
 			packageJsonStream,
 			productJsonStream,
 			license,
+			thirdPartylicense,
 			sources,
 			deps,
 			node,
@@ -416,20 +431,24 @@ function packageTask(type, platform, arc
 					.pipe(rename(`bin/${product.serverApplicationName}.cmd`)),
 			);
 		} else if (platform === 'linux' || platform === 'alpine' || platform === 'darwin') {
+			const nodePath = isSlim ? 'node' : "$ROOT/node";
 			result = es.merge(result,
 				gulp.src(`resources/server/bin/remote-cli/${platform === 'darwin' ? 'code-darwin.sh' : 'code-linux.sh'}`, { base: '.' })
 					.pipe(replace('@@VERSION@@', version))
 					.pipe(replace('@@COMMIT@@', commit))
 					.pipe(replace('@@APPNAME@@', product.applicationName))
+					.pipe(replace('"$ROOT/node"', nodePath))
 					.pipe(rename(`bin/remote-cli/${product.applicationName}`))
 					.pipe(util.setExecutableBit()),
 				gulp.src(`resources/server/bin/helpers/${platform === 'darwin' ? 'browser-darwin.sh' : 'browser-linux.sh'}`, { base: '.' })
 					.pipe(replace('@@VERSION@@', version))
 					.pipe(replace('@@COMMIT@@', commit))
 					.pipe(replace('@@APPNAME@@', product.applicationName))
+					.pipe(replace('"$ROOT/node"', nodePath))
 					.pipe(rename(`bin/helpers/browser.sh`))
 					.pipe(util.setExecutableBit()),
 				gulp.src(`resources/server/bin/${platform === 'darwin' ? 'code-server-darwin.sh' : 'code-server-linux.sh'}`, { base: '.' })
+					.pipe(replace('"$ROOT/node"', nodePath))
 					.pipe(rename(`bin/${product.serverApplicationName}`))
 					.pipe(util.setExecutableBit())
 			);
@@ -517,6 +536,13 @@ function tweakProductForServerWeb(produc
 		['', 'min'].forEach(minified => {
 			const sourceFolderName = `out-vscode-${type}${dashed(minified)}`;
 			const destinationFolderName = `vscode-${type}${dashed(platform)}${dashed(arch)}`;
+			const slimDestinationFolderName = `${destinationFolderName}-slim`;
+
+			const slimServerTaskCI = task.define(`vscode-${type}${dashed(platform)}${dashed(arch)}${dashed(minified)}-ci-slim`, task.series(
+				util.rimraf(path.join(BUILD_ROOT, slimDestinationFolderName)),
+				packageTask(type, platform, arch, sourceFolderName, slimDestinationFolderName, true)
+			));
+			gulp.task(slimServerTaskCI);
 
 			const serverTaskCI = task.define(`vscode-${type}${dashed(platform)}${dashed(arch)}${dashed(minified)}-ci`, task.series(
 				gulp.task(`node-${platform}-${arch}`),
@@ -533,6 +559,21 @@ function tweakProductForServerWeb(produc
 				serverTaskCI
 			));
 			gulp.task(serverTask);
+
+			if (type === 'reh-web') {
+				const combinedServerAndWebTask = task.define(`vscode-combined-${type}${dashed(platform)}${dashed(arch)}${dashed(minified)}`, task.series(
+					compileBuildTask,
+					gulp.task(`vscode-web${dashed(minified)}-ci`),
+					compileExtensionsBuildTask,
+					compileExtensionMediaBuildTask,
+					minified && !process.env.DISABLE_MANGLE ? minifyTask : optimizeTask,
+					task.parallel(
+						serverTaskCI,
+						slimServerTaskCI
+					)
+				));
+				gulp.task(combinedServerAndWebTask);
+			}
 		});
 	});
 });
Index: AWSCodeOSS/build-private/src/build/lib/extensions.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/lib/extensions.js
+++ AWSCodeOSS/build-private/src/build/lib/extensions.js
@@ -82,6 +82,21 @@ function fromLocal(extensionPath, forWeb
     }
     return input;
 }
+async function asyncRetry(func, maxRetries) {
+	let retryNum = 0;
+	for(;;) {
+		try {
+			return await func();
+		} catch(err) {
+			retryNum++;
+			if (retryNum == maxRetries) {
+				throw err;
+			} else {
+				console.warn(`retrying operation, attempt ${retryNum} out of ${maxRetries}`);
+			}
+		}
+	}
+}
 function fromLocalWebpack(extensionPath, webpackConfigFileName, disableMangle) {
     const vsce = require('@vscode/vsce');
     const webpack = require('webpack');
@@ -97,12 +112,15 @@ function fromLocalWebpack(extensionPath,
             }
         }
     }
+    // During building, some of the parallel `yarn list --prod --json` calls were failing intermittently
+    // A failure causes the whole build process to fail, but the operation seems to succeed on retry
+    // Added this retry to make the build process more stable
     // TODO: add prune support based on packagedDependencies to vsce.PackageManager.Npm similar
     // to vsce.PackageManager.Yarn.
     // A static analysis showed there are no webpack externals that are dependencies of the current
     // local extensions so we can use the vsce.PackageManager.None config to ignore dependencies list
     // as a temporary workaround.
-    vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.None, packagedDependencies }).then(fileNames => {
+    asyncRetry(() => vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.None, packagedDependencies }), 3).then(fileNames => {
         const files = fileNames
             .map(fileName => path.join(extensionPath, fileName))
             .map(filePath => new File({
@@ -183,7 +201,10 @@ function fromLocalWebpack(extensionPath,
 function fromLocalNormal(extensionPath) {
     const vsce = require('@vscode/vsce');
     const result = es.through();
-    vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.Npm })
+    // During building, some of the parallel `yarn list --prod --json` calls were failing intermittently
+    // A failure causes the whole build process to fail, but the operation seems to succeed on retry
+    // Added this retry to make the build process more stable
+    asyncRetry(() => vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.Npm }), 3)
         .then(fileNames => {
         const files = fileNames
             .map(fileName => path.join(extensionPath, fileName))
Index: AWSCodeOSS/build-private/src/build/lib/extensions.ts
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/lib/extensions.ts
+++ AWSCodeOSS/build-private/src/build/lib/extensions.ts
@@ -83,6 +83,21 @@ function fromLocal(extensionPath: string
 	return input;
 }
 
+async function asyncRetry<T>(func: () => Promise<T>, maxRetries: number): Promise<T> {
+	let retryNum = 0;
+	for(;;) {
+		try {
+			return await func();
+		} catch(err: unknown) {
+			retryNum++;
+			if (retryNum == maxRetries) {
+				throw err;
+			} else {
+				console.warn(`retrying operation, attempt ${retryNum} out of ${maxRetries}`);
+			}
+		}
+	}
+}
 
 function fromLocalWebpack(extensionPath: string, webpackConfigFileName: string, disableMangle: boolean): Stream {
 	const vsce = require('@vscode/vsce') as typeof import('@vscode/vsce');
@@ -100,13 +115,15 @@ function fromLocalWebpack(extensionPath:
 			}
 		}
 	}
-
+	// During building, some of the parallel `yarn list --prod --json` calls were failing intermittently
+	// A failure causes the whole build process to fail, but the operation seems to succeed on retry
+	// Added this retry to make the build process more stable
 	// TODO: add prune support based on packagedDependencies to vsce.PackageManager.Npm similar
 	// to vsce.PackageManager.Yarn.
 	// A static analysis showed there are no webpack externals that are dependencies of the current
 	// local extensions so we can use the vsce.PackageManager.None config to ignore dependencies list
 	// as a temporary workaround.
-	vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.None, packagedDependencies }).then(fileNames => {
+	asyncRetry(() => vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.None, packagedDependencies }), 3).then(fileNames => {
 		const files = fileNames
 			.map(fileName => path.join(extensionPath, fileName))
 			.map(filePath => new File({
@@ -200,8 +217,10 @@ function fromLocalWebpack(extensionPath:
 function fromLocalNormal(extensionPath: string): Stream {
 	const vsce = require('@vscode/vsce') as typeof import('@vscode/vsce');
 	const result = es.through();
-
-	vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.Npm })
+	// During building, some of the parallel `yarn list --prod --json` calls were failing intermittently
+	// A failure causes the whole build process to fail, but the operation seems to succeed on retry
+	// Added this retry to make the build process more stable
+	asyncRetry(() => vsce.listFiles({ cwd: extensionPath, packageManager: vsce.PackageManager.Npm }), 3)
 		.then(fileNames => {
 			const files = fileNames
 				.map(fileName => path.join(extensionPath, fileName))
Index: AWSCodeOSS/build-private/src/build/npm/postinstall.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/npm/postinstall.js
+++ AWSCodeOSS/build-private/src/build/npm/postinstall.js
@@ -137,5 +137,5 @@ for (let dir of dirs) {
 	npmInstall(dir, opts);
 }
 
-cp.execSync('git config pull.rebase merges');
-cp.execSync('git config blame.ignoreRevsFile .git-blame-ignore-revs');
+// cp.execSync('git config pull.rebase merges');
+// cp.execSync('git config blame.ignoreRevsFile .git-blame-ignore-revs');
Index: AWSCodeOSS/build-private/src/package.json
===================================================================
--- AWSCodeOSS.orig/build-private/src/package.json
+++ AWSCodeOSS/build-private/src/package.json
@@ -36,7 +36,7 @@
     "watch-extensionsd": "deemon npm run watch-extensions",
     "kill-watch-extensionsd": "deemon --kill npm run watch-extensions",
     "precommit": "node build/hygiene.js",
-    "gulp": "node --max-old-space-size=8192 ./node_modules/gulp/bin/gulp.js",
+    "gulp": "NODE_OPTIONS=\"${NODE_OPTIONS:---max-old-space-size=8192}\" node ./node_modules/gulp/bin/gulp.js",
     "electron": "node build/lib/electron",
     "7z": "7z",
     "update-grammars": "node build/npm/update-all-grammars.mjs",
@@ -79,7 +79,6 @@
     "@vscode/iconv-lite-umd": "0.7.0",
     "@vscode/policy-watcher": "^1.1.4",
     "@vscode/proxy-agent": "^0.22.0",
-    "@vscode/ripgrep": "^1.15.9",
     "@vscode/spdlog": "^0.15.0",
     "@vscode/sqlite3": "5.1.6-vscode",
     "@vscode/sudo-prompt": "9.3.1",
@@ -96,13 +95,12 @@
     "@xterm/addon-webgl": "^0.19.0-beta.64",
     "@xterm/headless": "^5.6.0-beta.64",
     "@xterm/xterm": "^5.6.0-beta.64",
+    "http-proxy": "^1.18.1",
     "http-proxy-agent": "^7.0.0",
     "https-proxy-agent": "^7.0.2",
     "jschardet": "3.1.3",
-    "kerberos": "2.1.1",
     "minimist": "^1.2.6",
     "native-is-elevated": "0.7.0",
-    "native-keymap": "^3.3.5",
     "native-watchdog": "^1.4.1",
     "node-pty": "1.1.0-beta21",
     "open": "^8.4.2",
@@ -120,6 +118,7 @@
     "@types/cookie": "^0.3.3",
     "@types/debug": "^4.1.5",
     "@types/gulp-svgmin": "^1.2.1",
+    "@types/http-proxy": "^1.17.15",
     "@types/http-proxy-agent": "^2.0.1",
     "@types/kerberos": "^1.1.2",
     "@types/minimist": "^1.2.1",
@@ -140,7 +139,6 @@
     "@typescript-eslint/parser": "^6.21.0",
     "@vscode/gulp-electron": "^1.36.0",
     "@vscode/l10n-dev": "0.0.35",
-    "@vscode/telemetry-extractor": "^1.10.2",
     "@vscode/test-cli": "^0.0.6",
     "@vscode/test-electron": "^2.4.0",
     "@vscode/test-web": "^0.0.60",
Index: AWSCodeOSS/build-private/src/remote/package.json
===================================================================
--- AWSCodeOSS.orig/build-private/src/remote/package.json
+++ AWSCodeOSS/build-private/src/remote/package.json
@@ -9,7 +9,6 @@
     "@vscode/deviceid": "^0.1.1",
     "@vscode/iconv-lite-umd": "0.7.0",
     "@vscode/proxy-agent": "^0.22.0",
-    "@vscode/ripgrep": "^1.15.9",
     "@vscode/spdlog": "^0.15.0",
     "@vscode/tree-sitter-wasm": "^0.0.4",
     "@vscode/vscode-languagedetection": "1.0.21",
@@ -24,10 +23,10 @@
     "@xterm/headless": "^5.6.0-beta.64",
     "@xterm/xterm": "^5.6.0-beta.64",
     "cookie": "^0.4.0",
+    "http-proxy": "^1.18.1",
     "http-proxy-agent": "^7.0.0",
     "https-proxy-agent": "^7.0.2",
     "jschardet": "3.1.3",
-    "kerberos": "2.1.1",
     "minimist": "^1.2.6",
     "native-watchdog": "^1.4.1",
     "node-pty": "1.1.0-beta21",
Index: AWSCodeOSS/build-private/src/extensions/emmet/package.json
===================================================================
--- AWSCodeOSS.orig/build-private/src/extensions/emmet/package.json
+++ AWSCodeOSS/build-private/src/extensions/emmet/package.json
@@ -482,7 +482,7 @@
     "@types/node": "20.x"
   },
   "dependencies": {
-    "@emmetio/css-parser": "ramya-rao-a/css-parser#vscode",
+    "@emmetio/css-parser": "0.4.0",
     "@emmetio/html-matcher": "^0.3.3",
     "@emmetio/math-expression": "^1.0.5",
     "@vscode/emmet-helper": "^2.8.8",
Index: AWSCodeOSS/build-private/src/extensions/github/package.json
===================================================================
--- AWSCodeOSS.orig/build-private/src/extensions/github/package.json
+++ AWSCodeOSS/build-private/src/extensions/github/package.json
@@ -180,7 +180,7 @@
   },
   "dependencies": {
     "@octokit/graphql": "5.0.5",
-    "@octokit/graphql-schema": "14.4.0",
+    "@octokit/graphql-schema": "14.58.0",
     "@octokit/rest": "19.0.4",
     "tunnel": "^0.0.6",
     "@vscode/extension-telemetry": "^0.9.0"
Index: AWSCodeOSS/build-private/src/extensions/simple-browser/package.json
===================================================================
--- AWSCodeOSS.orig/build-private/src/extensions/simple-browser/package.json
+++ AWSCodeOSS/build-private/src/extensions/simple-browser/package.json
@@ -70,7 +70,7 @@
   },
   "devDependencies": {
     "@types/vscode-webview": "^1.57.0",
-    "vscode-codicons": "^0.0.14"
+    "vscode-codicons": "0.0.12"
   },
   "repository": {
     "type": "git",
Index: AWSCodeOSS/build-private/src/build/lib/compilation.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/lib/compilation.js
+++ AWSCodeOSS/build-private/src/build/lib/compilation.js
@@ -112,7 +112,7 @@ function compileTask(src, out, build, op
         }
         // mangle: TypeScript to TypeScript
         let mangleStream = es.through();
-        if (build && !options.disableMangle) {
+        if (build && !options.disableMangle && !process.env.DISABLE_MANGLE) {
             let ts2tsMangler = new index_1.Mangler(compile.projectPath, (...data) => fancyLog(ansiColors.blue('[mangler]'), ...data), { mangleExports: true, manglePrivateFields: true });
             const newContentsByFileName = ts2tsMangler.computeNewFileContents(new Set(['saveState']));
             mangleStream = es.through(async function write(data) {
Index: AWSCodeOSS/build-private/src/build/lib/dependencies.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/lib/dependencies.js
+++ AWSCodeOSS/build-private/src/build/lib/dependencies.js
@@ -21,13 +21,14 @@ function getNpmProductionDependencies(fo
             if (/ELSPROBLEMS/.test(match[0])) {
                 continue;
             }
-            else if (/invalid: xterm/.test(match[0])) {
+            else if (/(invalid|extraneous|missing):/.test(match[0])) {
                 continue;
             }
             else if (/A complete log of this run/.test(match[0])) {
-                continue;
+                break;
             }
             else {
+                console.log(match[0]);
                 throw err;
             }
         }
Index: AWSCodeOSS/build-private/src/build/gulpfile.extensions.js
===================================================================
--- AWSCodeOSS.orig/build-private/src/build/gulpfile.extensions.js
+++ AWSCodeOSS/build-private/src/build/gulpfile.extensions.js
@@ -100,7 +100,7 @@ const tasks = compilations.map(function
 		headerOut = relativeDirname.substr(index + 1) + '/out';
 	}
 
-	function createPipeline(build, emitError, transpileOnly) {
+	function createPipeline(build, emitError, transpileOnly = true) { // transpile to avoid spurious type errors
 		const tsb = require('./lib/tsb');
 		const sourcemaps = require('gulp-sourcemaps');
 
