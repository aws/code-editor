name: Update Automation

on:
  # schedule:
  #   - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-automation:
    name: Run Automation Tasks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Setup environment
        run: |
          echo "Installing required dependencies"
          sudo apt-get update
          sudo apt-get install -y quilt libxml2-utils jq
          
          # Configure git user
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          
      - name: Get latest semver branch
        run: |
          git fetch origin
          LATEST_SEMVER=$(git branch -r | grep -E 'origin/[0-9]+\.[0-9]+$' | sed 's/.*origin\///' | sort -V | tail -1)
          # For testing purposes
          if [ -z "$LATEST_SEMVER" ]; then
            LATEST_SEMVER="main"
            echo "No semver branches found, using main"
          fi
          echo "LATEST_SEMVER=$LATEST_SEMVER" >> $GITHUB_ENV
          echo "Using branch: $LATEST_SEMVER"
          git checkout "$LATEST_SEMVER"
          git submodule update --init --recursive
          
      - name: Check if update needed
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cd third-party-src
          git fetch --tags
          CURRENT_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null | head -1)
          if [ -z "$CURRENT_TAG" ]; then
            echo "Error: Submodule is not on a tagged commit"
            exit 1
          fi
          cd ..
          
          LATEST_TAG=$(gh api repos/microsoft/vscode/releases/latest --template '{{.tag_name}}')
          
          echo "Current tag: $CURRENT_TAG"
          echo "Latest tag: $LATEST_TAG"
          
          if [ "$CURRENT_TAG" = "$LATEST_TAG" ]; then
            echo "Submodule is up to date with latest VS Code release"
            exit 0
          else
            echo "Update needed: $CURRENT_TAG -> $LATEST_TAG"
            
            # Create or checkout staging branch
            STAGING_BRANCH="staging-code-editor-$LATEST_TAG"
            
            if git show-ref --verify --quiet refs/remotes/origin/"$STAGING_BRANCH"; then
              echo "Staging branch $STAGING_BRANCH already exists, checking it out"
              git checkout -b "$STAGING_BRANCH" origin/"$STAGING_BRANCH"
            else
              echo "Creating new staging branch: $STAGING_BRANCH"
              git checkout -b "$STAGING_BRANCH"
            fi
            
            # Update submodule to latest VS Code release
            echo "Updating submodule to $LATEST_TAG"
            cd third-party-src
            git fetch --tags
            git checkout "$LATEST_TAG"
            cd ..
            
            git add third-party-src
            if git diff --staged --quiet; then
              echo "No changes to commit, submodule already up to date"
            else
              git commit -m "Update VS Code submodule to $LATEST_TAG"
              git push origin "$STAGING_BRANCH"
            fi
            
            echo "STAGING_BRANCH=$STAGING_BRANCH" >> $GITHUB_ENV
            echo "Created staging branch: $STAGING_BRANCH with VS Code $LATEST_TAG"
          fi
          
      - name: Rebase patches for all targets
        run: |
          echo "Rebasing patches for all build targets"
          
          # Test each target sequentially with rebasing
          FAILED_TARGETS=()
          
          for target in code-editor-server code-editor-sagemaker-server code-editor-web-embedded code-editor-web-embedded-with-terminal; do
            echo ""
            echo "=== REBASING TARGET: $target ==="
            
            if ./scripts/prepare-src.sh --command rebase_patches "$target"; then
              echo "Successfully rebased $target"
            else
              echo "Failed to rebase $target"
              FAILED_TARGETS+=("$target")
            fi
            
            # Clean up for next target
            rm -rf code-editor-src
          
            echo "=== END TARGET: $target ==="
          done
          
          # Report results
          if [ ${#FAILED_TARGETS[@]} -gt 0 ]; then
            echo "Failed targets: ${FAILED_TARGETS[*]}"
            exit 1
          else
            echo "All targets rebased successfully"
          fi
          
          # Commit rebased patches if any changes
          git add patches/
          if ! git diff --staged --quiet; then
            git commit -m "Rebase patches for all targets"
            git push origin "$STAGING_BRANCH"
          fi
          
      - name: Update package-lock overrides
        run: |
          echo "Updating package-lock.json files for all targets"
          
          for target in code-editor-server code-editor-sagemaker-server code-editor-web-embedded code-editor-web-embedded-with-terminal; do
            echo "Processing $target"
            
            # Get package-lock-overrides path from configuration
            OVERRIDE_PATH=$(jq -r '."package-lock-overrides".path' "configuration/${target}.json")
            
            # Create patched source
            ./scripts/prepare-src.sh "$target"
            
            # Install dependencies
            cd code-editor-src
            npm install
            cd ..
            
            # Clear and create override directory
            rm -rf "$OVERRIDE_PATH"
            mkdir -p "$OVERRIDE_PATH"
            
            # Find and copy only updated package-lock.json files
            find code-editor-src -name "package-lock.json" -type f | while read -r file; do
              rel_path="${file#code-editor-src/}"
              third_party_file="third-party-src/$rel_path"
              
              if [ ! -f "$third_party_file" ] || ! cmp -s "$file" "$third_party_file"; then
                dest_dir="$OVERRIDE_PATH/$(dirname "$rel_path")"
                mkdir -p "$dest_dir"
                cp "$file" "$dest_dir/"
                echo "Copied updated $rel_path to $OVERRIDE_PATH"
              fi
            done
            
            # Clean up
            rm -rf code-editor-src
          done
          
          # Commit changes if any
          git add package-lock-overrides/
          if ! git diff --staged --quiet; then
            git commit -m "Update package-lock.json overrides for all targets"
            git push origin "$STAGING_BRANCH"
          fi
          
  handle-failures:
    name: Handle Failures
    runs-on: ubuntu-latest
    needs: update-automation
    if: failure()
    steps:
      - name: Report rebase failures
        run: |
          # TODO: Implement metric reporting to CW.
          exit 1
            
    